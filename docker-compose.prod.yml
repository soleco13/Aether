name: aether-production

services:
  postgresql:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 2s
      retries: 300
    environment:
      POSTGRES_DB: aether
      POSTGRES_USER: aether
      POSTGRES_PASSWORD: aether_secure_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:5
    restart: unless-stopped
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=aether
      - MINIO_ROOT_PASSWORD=aether_minio_password_2024
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 20s
      retries: 300
    entrypoint: ""
    command: minio server --console-address :9001 /data
    volumes:
      - minio_data:/data

  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
        restart: true
    entrypoint: >
      sh -c "
      /usr/bin/mc alias set aether http://minio:9000 aether aether_minio_password_2024 && \
      /usr/bin/mc mb aether/aether-media-storage && \
      /usr/bin/mc version enable aether/aether-media-storage && \
      exit 0;"

  app:
    build:
      context: .
      target: backend-production
      args:
        DOCKER_USER: 1000
    restart: unless-stopped
    image: aether:backend-production
    environment:
      - DJANGO_CONFIGURATION=Production
      - DJANGO_SECRET_KEY=aether_super_secret_key_production_2024_change_this
      - DEBUG=False
      - DB_HOST=postgresql
      - DB_NAME=aether
      - DB_USER=aether
      - DB_PASSWORD=aether_secure_password_2024
      - DB_PORT=5432
      - POSTGRES_DB=aether
      - POSTGRES_USER=aether
      - REDIS_URL=redis://redis:6379/1
      - REDIS_SESSION_URL=redis://redis:6379/2
      - ALLOWED_HOSTS=aethers.ru,aetherhelp.store,45.146.166.126,localhost
      - CSRF_TRUSTED_ORIGINS=https://aethers.ru,https://aetherhelp.store,http://45.146.166.126:8000
      - CORS_ALLOWED_ORIGINS=https://aethers.ru,https://aetherhelp.store,http://45.146.166.126:3000
      - SECURE_SSL_REDIRECT=False
      - SECURE_PROXY_SSL_HEADER=
      - SESSION_COOKIE_SECURE=False
      - CSRF_COOKIE_SECURE=False
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_ACCESS_KEY_ID=aether
      - AWS_S3_SECRET_ACCESS_KEY=aether_minio_password_2024
      - AWS_STORAGE_BUCKET_NAME=aether-media-storage
      - LANGUAGE_CODE=ru-ru
      - LANGUAGES=ru-ru,en-us
      - LANGUAGE_COOKIE_NAME=aether_language
    ports:
      - "8000:8000"
    volumes:
      - static_data:/data/static
      - media_data:/data/media
    depends_on:
      postgresql:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
      createbuckets:
        condition: service_completed_successfully

  celery:
    image: aether:backend-production
    restart: unless-stopped
    command: ["celery", "-A", "impress.celery_app", "worker", "-l", "INFO"]
    environment:
      - DJANGO_CONFIGURATION=Production
      - DJANGO_SECRET_KEY=aether_super_secret_key_production_2024_change_this
      - DB_HOST=postgresql
      - DB_NAME=aether
      - DB_USER=aether
      - DB_PASSWORD=aether_secure_password_2024
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - static_data:/data/static
      - media_data:/data/media
    depends_on:
      - app

  frontend:
    build: 
      context: .
      dockerfile: ./src/frontend/Dockerfile
      target: impress-production
      args:
        API_ORIGIN: "https://aethers.ru"
        NEXT_PUBLIC_API_ORIGIN: "https://aethers.ru"
        PUBLISH_AS_MIT: "false"
        SW_DEACTIVATED: "true"
    restart: unless-stopped
    image: aether:frontend-production
    ports:
      - "3000:3000"
    depends_on:
      - app

  nginx:
    image: nginx:1.25
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - static_data:/var/www/static:ro
      - media_data:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - frontend

volumes:
  postgres_data:
  redis_data:
  minio_data:
  static_data:
  media_data: 