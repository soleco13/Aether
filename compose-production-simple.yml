name: aether-production

services:
  postgresql:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - env.d/production/postgresql
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - aether-network

  redis:
    image: redis:5
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - aether-network

  minio:
    image: minio/minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=aether_minio
      - MINIO_ROOT_PASSWORD=aether_minio_password_2025
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 20s
      retries: 5
    entrypoint: ""
    command: minio server --console-address :9001 /data
    volumes:
      - minio_data:/data
    networks:
      - aether-network

  createbuckets:
    image: minio/mc
    restart: "no"
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
      /usr/bin/mc alias set aetherminio http://minio:9000 aether_minio aether_minio_password_2025 && \
      (/usr/bin/mc mb aetherminio/impress-media-storage || echo 'Bucket already exists, continuing...') && \
      /usr/bin/mc version enable aetherminio/impress-media-storage && \
      exit 0;"
    networks:
      - aether-network

  app-prod:
    build:
      context: .
      target: backend-production
      args:
        DOCKER_USER: 1000
    restart: unless-stopped
    image: aether:backend-production
    environment:
      - DJANGO_CONFIGURATION=Production
    env_file:
      - env.d/production/common
      - env.d/production/postgresql
    ports:
      - "8071:8000"
    volumes:
      - static_files:/data/static
      - media_files:/data/media
    depends_on:
        postgresql:
            condition: service_healthy
        redis:
          condition: service_started
        createbuckets:
          condition: service_completed_successfully
    networks:
      - aether-network
  
  celery-prod:
    build:
      context: .
      target: backend-production
      args:
        DOCKER_USER: 1000
    restart: unless-stopped
    image: aether:backend-production
    command: ["celery", "-A", "impress.celery_app", "worker", "-l", "INFO"]
    environment:
      - DJANGO_CONFIGURATION=Production
    env_file:
      - env.d/production/common
      - env.d/production/postgresql
    volumes:
      - static_files:/data/static
      - media_files:/data/media
    depends_on:
      - app-prod
    networks:
      - aether-network

  nginx:
    image: nginx:1.25
    restart: unless-stopped
    ports:
      - "8083:8083"
    volumes:
      - ./docker/files/etc/nginx/conf.d:/etc/nginx/conf.d:ro
      - static_files:/data/static:ro
    depends_on:
      app-prod:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - aether-network

  frontend-development:
    build: 
      context: .
      dockerfile: ./src/frontend/Dockerfile
      target: impress-dev
      args:
        API_ORIGIN: "http://45.146.166.126:8071"
        NEXT_PUBLIC_API_ORIGIN: "http://45.146.166.126:8071"
        PUBLISH_AS_MIT: "false"
        SW_DEACTIVATED: "true"
    restart: unless-stopped
    image: aether:frontend-development
    environment:
      - NEXT_PUBLIC_API_ORIGIN=http://45.146.166.126:8071
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/home/frontend
      - /home/frontend/node_modules
      - /home/frontend/apps/impress/node_modules
    networks:
      - aether-network

  y-provider-development:
    build: 
      context: .
      dockerfile: ./src/frontend/servers/y-provider/Dockerfile
      target: y-provider-development
    restart: unless-stopped
    image: aether:y-provider-development
    env_file:
      - env.d/production/common
    ports:
      - "4444:4444"
    volumes:
      - ./src/frontend/:/home/frontend
      - /home/frontend/node_modules
      - /home/frontend/servers/y-provider/node_modules
    networks:
      - aether-network

  kc_postgresql:
    image: postgres:14.3
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - env.d/production/kc_postgresql
    volumes:
      - kc_postgresql_data:/var/lib/postgresql/data
    networks:
      - aether-network

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.1
    restart: unless-stopped
    volumes:
      - ./docker/auth/realm.json:/opt/keycloak/data/import/realm.json
      - ./docker/keycloak-themes/aether:/opt/keycloak/themes/aether
    command:
      - start
      - --features=preview
      - --import-realm
      - --proxy=edge
      - --hostname-url=http://45.146.166.126:8083
      - --hostname-admin-url=http://45.146.166.126:8083/
      - --hostname-strict=false
      - --hostname-strict-https=false
      - --health-enabled=true
      - --metrics-enabled=true
    healthcheck:
      test: ["CMD", "curl", "--head", "-fsS", "http://localhost:8080/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: aether_keycloak_admin_2025
      KC_DB: postgres
      KC_DB_URL_HOST: kc_postgresql
      KC_DB_URL_DATABASE: keycloak_aether
      KC_DB_PASSWORD: keycloak_strong_password_2025
      KC_DB_USERNAME: keycloak_user
      KC_DB_SCHEMA: public
      PROXY_ADDRESS_FORWARDING: 'true'
    ports:
      - "8080:8080"
    depends_on:
      kc_postgresql:
        condition: service_healthy
    networks:
      - aether-network

volumes:
  postgresql_data:
  kc_postgresql_data:
  redis_data:
  minio_data:
  static_files:
  media_files:

networks:
  aether-network:
    driver: bridge 